# https://github.com/deviantony/docker-elk/blob/master/docker-compose.yml
version: '3'

services:
  
  vault:
    # docker run --cap-add=IPC_LOCK -d --name=dev-vault vault
    image:
      vault
    logging:
      driver: "json-file"
    cap_add:
      - IPC_LOCK
    ports:
      - 8200:8200
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${CASTLE_VAULT_ROOT_TOKEN_ID}
    networks:
      - castle

  #
  # ELK
  #     
  elasticsearch:
    # https://stackoverflow.com/questions/41192680/update-max-map-count-for-elasticsearch-docker-container-mac-host
    # docker-machine ssh
    # sudo sysctl -w vm.max_map_count=262144
    build:
      context: docker-img-elasticsearch/
    logging:
      driver: "json-file"
    volumes:
      - ./docker-img-elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - castle

  logstash:
    build:
      context: docker-img-logstash/
    logging:
      driver: "json-file"
    volumes:
      - ./docker-img-logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./docker-img-logstash/config/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5000:5000"
      - "5044:5044"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - castle
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: docker-img-kibana/
    logging:
      driver: "json-file"
    volumes:
      - ./docker-img-kibana/config/:/usr/share/kibana/config:ro
    ports:
      - "5601:5601"
    networks:
      - castle
    depends_on:
      - elasticsearch

  filebeat:
    build:
      context: docker-img-filebeat/
    logging:
      driver: "json-file"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - castle
    depends_on:
      - elasticsearch

  # 
  # Gitlab
  #  
  gitlab:
    image: 'gitlab/gitlab-ce:latest'
    restart: always
    #hostname: 'gitlab.example.com'
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://gitlab.example.com'
        # Add any other gitlab.rb configuration here, each on its own line
    ports:
      #- '80:80'
      - '443:443'
      #- '2222:22'
    volumes:
      - '${HOME}/gitlab/config:/etc/gitlab'
      - '${HOME}/gitlab/logs:/var/log/gitlab'
      - '${HOME}/gitlab/data:/var/opt/gitlab'
    networks:
      - castle
    privileged: true

  #
  # Mattermost
  #
  # docker-compose build
  # mkdir -pv ./volumes/app/mattermost/{data,logs,config}
  # chown -R 2000:2000 ./volumes/app/mattermost/
  mattermost-db:
    build: 
      context: docker-img-mattermost-db/
    read_only: true
    restart: unless-stopped
    volumes:
      - ${HOME}/mattermost/db/var/lib/postgresql/data:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    environment:
      - POSTGRES_USER=mmuser
      - POSTGRES_PASSWORD=mmuser_password
      - POSTGRES_DB=mattermost
    networks:
      - castle

  mattermost-app:
    build:
      context: docker-img-mattermost-app/
      # uncomment following lines for team edition or change UID/GID
      # args:
      #   - edition=team
      #   - PUID=1000
      #   - PGID=1000
    restart: unless-stopped
    volumes:
      - ${HOME}/mattermost/app/config:/mattermost/config:rw
      - ${HOME}/mattermost/app/data:/mattermost/data:rw
      - ${HOME}/mattermost/app/logs:/mattermost/logs:rw
      - ${HOME}/mattermost/app/plugins:/mattermost/plugins:rw
      - /etc/localtime:/etc/localtime:ro
    environment:
      - DB_HOST=mattermost-db
      - DB_PORT=5432
      # set same as db credentials and dbname
      - MM_USERNAME=mmuser
      - MM_PASSWORD=mmuser_password
      - MM_DBNAME=mattermost
      # in case your config is not in default location
      #- MM_CONFIG=/mattermost/config/config.json
    networks:
      - castle

  mattermost-web:
    build: 
      context: docker-img-mattermost-web/
    ports:
      - "8080:80"
      - "8443:443"
    read_only: true
    restart: unless-stopped
    volumes:
      # This directory must have cert files if you want to enable SSL
      - ${HOME}/mattermost/web/cert:/cert:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - APP_HOST=mattermost-app
      - APP_PORT=8000
    #  - MATTERMOST_ENABLE_SSL=true
    networks:
      - castle

networks:

  castle:
    driver: bridge
